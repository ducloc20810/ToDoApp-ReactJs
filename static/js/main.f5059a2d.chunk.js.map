{"version":3,"sources":["components/Todo.js","components/Todolist.js","components/Done.js","components/DoneList.js","App.js","index.js"],"names":["ButtonStyled","styled","Button","p","isCompleted","css","Todo","todo","OnCheckBtnClick","OnRemoveBtnClick","shouldFitContainer","iconAfter","className","onClick","id","style","visibility","primaryColor","name","Todolist","todoList","map","done","OnRemoveBtnDoneClick","textDecoration","DoneList","doneList","TODO_APP_STORAGE_KEY","DONE_STORAGE_KEY","App","useState","setTodolist","textInput","setTextinput","setDoneList","useEffect","storageTodoList","localStorage","getItem","storageDoneList","JSON","parse","setItem","stringify","TextFieldOnchange","useCallback","e","target","value","OnbtnClick","v4","filter","item","find","textAlign","placeholder","elemAfterInput","isDisabled","appearance","padding","onChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5059a2d.chunk.js","sourcesContent":["import Button from \"@atlaskit/button\";\r\nimport React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport CheckIcon from \"@atlaskit/icon/glyph/check\";\r\nimport TrashIcon from \"@atlaskit/icon/glyph/trash\";\r\n\r\nconst ButtonStyled = styled(Button)`\r\n  margin-top: 5px;\r\n  text-align: left;\r\n\r\n  &,\r\n  &:hover {\r\n    ${(p) => p.isCompleted && css``}\r\n  }\r\n\r\n  &:hover {\r\n    .checkIcon {\r\n      visibility: visible;\r\n    }\r\n  }\r\n  .checkIcon {\r\n    visibility: hidden;\r\n\r\n    &:hover {\r\n      background-color: \"black\";\r\n      border-radius: 3px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function Todo({ todo, OnCheckBtnClick, OnRemoveBtnClick }) {\r\n  return (\r\n    <>\r\n      <ButtonStyled\r\n        shouldFitContainer\r\n        iconAfter={\r\n          <>\r\n            <span\r\n              className=\"checkIcon\"\r\n              onClick={() => OnCheckBtnClick(todo.id)}\r\n              style={{ visibility: todo.isCompleted ? \"hidden\" : \"\" }}\r\n            >\r\n              <CheckIcon primaryColor=\"green\" />\r\n            </span>\r\n\r\n            <span\r\n              className=\"trashIcon\"\r\n              onClick={() => OnRemoveBtnClick(todo.id)}\r\n            >\r\n              <TrashIcon primaryColor=\"red\" />\r\n            </span>\r\n          </>\r\n        }\r\n      >\r\n        {todo.name}\r\n      </ButtonStyled>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\nexport default function Todolist({\r\n  todoList,\r\n  OnCheckBtnClick,\r\n  OnRemoveBtnClick,\r\n}) {\r\n  return (\r\n    <>\r\n      {todoList.map((todo) => (\r\n        <Todo\r\n          key={todo.id}\r\n          todo={todo}\r\n          OnCheckBtnClick={OnCheckBtnClick}\r\n          OnRemoveBtnClick={OnRemoveBtnClick}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n","import Button from \"@atlaskit/button\";\r\nimport React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport TrashIcon from \"@atlaskit/icon/glyph/trash\";\r\n\r\nconst ButtonStyled = styled(Button)`\r\n  margin-top: 5px;\r\n  text-align: left;\r\n`;\r\n\r\nexport default function done({ done, OnRemoveBtnDoneClick }) {\r\n  return (\r\n    <>\r\n      <ButtonStyled\r\n        shouldFitContainer\r\n        iconAfter={\r\n          <>\r\n            <span\r\n              className=\"trashIcon\"\r\n              onClick={() => OnRemoveBtnDoneClick(done.id)}\r\n            >\r\n              <TrashIcon primaryColor=\"red\" />\r\n            </span>\r\n          </>\r\n        }\r\n        style={{ textDecoration: done.isCompleted ? \"line-through\" : \"\" }}\r\n      >\r\n        {done.name}\r\n      </ButtonStyled>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Done from \"./Done\";\r\n\r\nexport default function DoneList({ doneList, OnRemoveBtnDoneClick }) {\r\n  return (\r\n    <>\r\n      {doneList.map((done) => (\r\n        <Done\r\n          key={done.id}\r\n          done={done}\r\n          OnRemoveBtnDoneClick={OnRemoveBtnDoneClick}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n","import Todolist from \"./components/Todolist\";\nimport DoneList from \"./components/DoneList\";\nimport Textfield from \"@atlaskit/textfield\";\nimport Button from \"@atlaskit/button\";\nimport { useCallback, useState, useEffect } from \"react\";\nimport { v4 } from \"uuid\";\nconst TODO_APP_STORAGE_KEY = \"TODO_APP\";\nconst DONE_STORAGE_KEY = \"DONE\";\nfunction App() {\n  //INITIALIZE\n  const [todoList, setTodolist] = useState([]); //array\n  const [textInput, setTextinput] = useState(\"\");\n  const [doneList, setDoneList] = useState([]);\n\n  useEffect(() => {\n    const storageTodoList = localStorage.getItem(TODO_APP_STORAGE_KEY);\n    const storageDoneList = localStorage.getItem(DONE_STORAGE_KEY);\n    if (storageTodoList) {\n      setTodolist(JSON.parse(storageTodoList));\n    }\n    if (storageDoneList) {\n      setDoneList(JSON.parse(storageDoneList));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(TODO_APP_STORAGE_KEY, JSON.stringify(todoList));\n    localStorage.setItem(DONE_STORAGE_KEY, JSON.stringify(doneList));\n  }, [todoList, doneList]);\n\n  const TextFieldOnchange = useCallback((e) => {\n    setTextinput(e.target.value);\n  }, []);\n\n  const OnbtnClick = useCallback(\n    (e) => {\n      setTodolist([\n        ...todoList,\n        { id: v4(), name: textInput, isCompleted: false },\n      ]);\n      setTextinput(\"\");\n    },\n    [textInput, todoList]\n  );\n\n  const OnRemoveBtnClick = useCallback(\n    (id) => {\n      setTodolist(todoList.filter((item) => item.id !== id));\n    },\n    [todoList]\n  );\n\n  const OnCheckBtnClick = useCallback(\n    (id) => {\n      setTodolist((item) =>\n        item.map((todo) =>\n          todo.id === id ? { ...todo, isCompleted: true } : todo\n        )\n      );\n\n      OnRemoveBtnClick(id);\n      setDoneList([\n        ...doneList,\n        {\n          id: v4(),\n          name: todoList.find((item) => item.id === id).name,\n          isCompleted: true,\n        },\n      ]);\n    },\n    [todoList, doneList, OnRemoveBtnClick]\n  );\n\n  const OnRemoveBtnDoneClick = useCallback(\n    (id) => {\n      setDoneList(doneList.filter((item) => item.id !== id));\n    },\n    [doneList]\n  );\n\n  return (\n    <>\n      <h1 style={{ textAlign: \"center\" }}>TO DO APP</h1>\n      <Textfield\n        name=\"add-todo\"\n        placeholder=\"Thêm việc cần làm\"\n        elemAfterInput={\n          <Button\n            isDisabled={!textInput}\n            appearance=\"primary\"\n            onClick={OnbtnClick}\n          >\n            Thêm\n          </Button>\n        }\n        css={{ padding: \"2px 4px 2px\" }}\n        value={textInput}\n        onChange={TextFieldOnchange}\n      ></Textfield>\n      <div className=\"toDoList\">\n        <h2>To Do List</h2>\n\n        <Todolist\n          todoList={todoList}\n          OnCheckBtnClick={OnCheckBtnClick}\n          OnRemoveBtnClick={OnRemoveBtnClick}\n        />\n      </div>\n\n      <div className=\"doneList\">\n        <h2>Done List</h2>\n        <DoneList\n          doneList={doneList}\n          OnRemoveBtnDoneClick={OnRemoveBtnDoneClick}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}